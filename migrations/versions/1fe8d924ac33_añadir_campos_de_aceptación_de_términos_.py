"""Añadir campos de aceptación de términos y condiciones

Revision ID: 1fe8d924ac33
Revises: 15b4936e92b8
Create Date: 2025-03-09 13:45:43.305551

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.sql import text

# revision identifiers, used by Alembic.
revision = '1fe8d924ac33'
down_revision = '15b4936e92b8'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('entries', schema=None) as batch_op:
        batch_op.alter_column('status',
               existing_type=postgresql.ENUM('BORRADOR', 'PUBLICADO', name='entrystatus'),
               type_=sa.String(length=50),
               existing_nullable=False)

    # Primero añadir columnas permitiendo NULL
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('has_accepted_terms', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('terms_accepted_at', sa.DateTime(), nullable=True))
    
    # Actualizar registros existentes
    op.execute(text("UPDATE users SET has_accepted_terms = FALSE"))
    
    # Ahora establecer la restricción NOT NULL
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('has_accepted_terms', nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_column('terms_accepted_at')
        batch_op.drop_column('has_accepted_terms')

    with op.batch_alter_table('entries', schema=None) as batch_op:
        batch_op.alter_column('status',
               existing_type=sa.String(length=50),
               type_=postgresql.ENUM('BORRADOR', 'PUBLICADO', name='entrystatus'),
               existing_nullable=False)

    # ### end Alembic commands ###
